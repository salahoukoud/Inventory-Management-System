/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse.inventory.view.forms;

import edu.ijse.gdse.inventory.model.Brand;
import edu.ijse.gdse.inventory.model.InventoryItem;
import edu.ijse.gdse.inventory.model.ItemMajor;
import edu.ijse.gdse.inventory.model.ItemType;

import edu.ijse.gdse.inventory.other.ComboSearch;
import edu.ijse.gdse.inventory.other.TextFieldHandler;


import edu.ijse.gdse.inventory.controller.BrandDetailController;
import edu.ijse.gdse.inventory.controller.InventoryItemController;
import edu.ijse.gdse.inventory.controller.ItemDetailController;
import edu.ijse.gdse.inventory.controller.ItemMajorController;
import edu.ijse.gdse.inventory.controller.ItemSizeDetailController;
import edu.ijse.gdse.inventory.controller.ItemSubTypeDetailController;
import edu.ijse.gdse.inventory.controller.ItemTypeController;
import edu.ijse.gdse.inventory.controller.PurchaseInvoiceController;
import edu.ijse.gdse.inventory.controller.VendorController;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import edu.ijse.gdse.inventory.model.ItemDetail;
import edu.ijse.gdse.inventory.model.ItemSubType;
import edu.ijse.gdse.inventory.model.SizeOfItem;
import edu.ijse.gdse.inventory.model.Vendor;
import edu.ijse.gdse.inventory.model.helper.ItemTableModel;
import edu.ijse.gdse.inventory.model.helper.UpdateInventoryItem;
import edu.ijse.gdse.inventory.other.ComboBoxHandler;
import edu.ijse.gdse.inventory.other.IDGenerator;
import edu.ijse.gdse.inventory.other.Validation;
import edu.ijse.gdse.inventory.view.main.HomeForm;
import edu.ijse.gdse.inventory.view.smallforms.AddAsNewItemForm;
import edu.ijse.gdse.inventory.view.smallforms.AddedItemTemporyListForm;
import edu.ijse.gdse.inventory.view.smallforms.NewItemPromptForm;


/**
 *
 * @author Pahansith
 */
public class NewItemForm extends javax.swing.JPanel {
    private static boolean isVarientsHas;
    private Vendor selectedVendor;
    private ItemMajor selectedMajorItemForUpdate;
    private boolean isAddingNewItem;
    private String nextDetailId;
    PurchaseInvoiceForm selectedItemsForm;
    ArrayList<ItemDetail> itemDetailsList;
    ArrayList<ItemTableModel> ItemTableModelList;
    ArrayList<InventoryItem> newlyAddingItemsList;
    private DefaultComboBoxModel nameComboModel;
    private String nextItemCode;
    private DefaultComboBoxModel suitableComboModel;
    private DefaultComboBoxModel brandComboModel;
    private DefaultComboBoxModel sizeComboModel;
    AddedItemTemporyListForm listForm ;
    private ArrayList<UpdateInventoryItem> updateList;
    
    public NewItemForm() {
        initComponents();
        setOtherPanels();
        setSizeTable();
        setVendorCombo();
        initCollections();
        listForm= new AddedItemTemporyListForm(this);
    }

    private void initCollections() {
        selectedItemsForm = new PurchaseInvoiceForm();
        itemDetailsList = new ArrayList<>();
        ItemTableModelList = new ArrayList<>();
        newlyAddingItemsList = new ArrayList<>();
        updateList = new ArrayList<>();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        idCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        descriptionText = new javax.swing.JTextField();
        nameCombo = new javax.swing.JComboBox<>();
        addNewItemButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        returnCheck = new javax.swing.JCheckBox();
        typeCombo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        brandCombo = new javax.swing.JComboBox<>();
        suitableCombo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        supplyPriceText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        markupText = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        retailPriceText = new javax.swing.JTextField();
        priceChangedCheck = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        qtyOnHandText = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        addingQtyText = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        minimumQtyText = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        supplierCombo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        suppliereCodeText = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        varientToggleLabel = new javax.swing.JLabel();
        sizePanel = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        sizeScroll = new javax.swing.JScrollPane();
        sizeTable = new javax.swing.JTable();
        priceText = new javax.swing.JTextField();
        sizeCombo = new javax.swing.JComboBox<>();
        priceLabel = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        addSizeButton = new javax.swing.JButton();
        qtyText = new javax.swing.JTextField();
        priceLabel1 = new javax.swing.JLabel();
        reOrderText = new javax.swing.JTextField();
        priceLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        addItemLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1120, 640));
        setPreferredSize(new java.awt.Dimension(1120, 640));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(247, 246, 242));

        jPanel8.setBackground(new java.awt.Color(43, 87, 154));
        jPanel8.setMinimumSize(new java.awt.Dimension(1120, 10));
        jPanel8.setPreferredSize(new java.awt.Dimension(1120, 7));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel27.setBackground(new java.awt.Color(204, 204, 204));
        jLabel27.setFont(new java.awt.Font("Myriad Pro", 0, 36)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(204, 204, 204));
        jLabel27.setText("New Item");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel27)
                .addGap(150, 150, 150))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 80));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(43, 87, 154), 1, true));
        jPanel3.setLayout(null);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText(" Category");
        jLabel6.setOpaque(true);
        jPanel3.add(jLabel6);
        jLabel6.setBounds(10, 160, 78, 15);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText(" Item Code");
        jLabel7.setOpaque(true);
        jPanel3.add(jLabel7);
        jLabel7.setBounds(10, 90, 90, 20);

        idCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        idCombo.setForeground(new java.awt.Color(0, 102, 255));
        jPanel3.add(idCombo);
        idCombo.setBounds(10, 110, 240, 25);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText(" Description");
        jLabel8.setOpaque(true);
        jPanel3.add(jLabel8);
        jLabel8.setBounds(10, 240, 105, 15);

        jLabel10.setBackground(new java.awt.Color(204, 204, 204));
        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("   Basic");
        jLabel10.setMinimumSize(new java.awt.Dimension(68, 22));
        jLabel10.setOpaque(true);
        jLabel10.setPreferredSize(new java.awt.Dimension(68, 22));
        jPanel3.add(jLabel10);
        jLabel10.setBounds(1, 1, 538, 29);

        descriptionText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        descriptionText.setForeground(new java.awt.Color(0, 102, 255));
        descriptionText.setMinimumSize(new java.awt.Dimension(14, 26));
        descriptionText.setPreferredSize(new java.awt.Dimension(14, 26));
        jPanel3.add(descriptionText);
        descriptionText.setBounds(10, 260, 240, 26);

        nameCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameCombo.setForeground(new java.awt.Color(0, 102, 255));
        nameCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nameComboItemStateChanged(evt);
            }
        });
        jPanel3.add(nameCombo);
        nameCombo.setBounds(10, 180, 240, 25);

        addNewItemButton.setBackground(new java.awt.Color(68, 106, 129));
        addNewItemButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addNewItemButton.setForeground(new java.awt.Color(0, 102, 255));
        addNewItemButton.setText("Add New Item");
        addNewItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewItemButtonMouseClicked(evt);
            }
        });
        addNewItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewItemButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addNewItemButton);
        addNewItemButton.setBounds(10, 50, 113, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconSearch.png"))); // NOI18N
        jPanel3.add(jLabel2);
        jLabel2.setBounds(500, 50, 30, 30);

        idText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        idText.setForeground(new java.awt.Color(193, 186, 171));
        idText.setText("Search by Id or Scan");
        idText.setMinimumSize(new java.awt.Dimension(14, 26));
        idText.setPreferredSize(new java.awt.Dimension(14, 26));
        idText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                idTextFocusGained(evt);
            }
        });
        idText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idTextKeyTyped(evt);
            }
        });
        jPanel3.add(idText);
        idText.setBounds(310, 50, 220, 30);

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText(" Return Status");
        jLabel19.setOpaque(true);
        jPanel3.add(jLabel19);
        jLabel19.setBounds(300, 300, 100, 20);
        jPanel3.add(returnCheck);
        returnCheck.setBounds(410, 300, 20, 20);

        typeCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        typeCombo.setForeground(new java.awt.Color(0, 102, 255));
        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        jPanel3.add(typeCombo);
        typeCombo.setBounds(300, 110, 223, 25);

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText(" Type");
        jLabel11.setOpaque(true);
        jPanel3.add(jLabel11);
        jLabel11.setBounds(300, 90, 78, 15);

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText(" Brand");
        jLabel12.setOpaque(true);
        jPanel3.add(jLabel12);
        jLabel12.setBounds(300, 240, 78, 15);

        brandCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        brandCombo.setForeground(new java.awt.Color(0, 102, 255));
        jPanel3.add(brandCombo);
        brandCombo.setBounds(300, 260, 223, 25);

        suitableCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        suitableCombo.setForeground(new java.awt.Color(0, 102, 255));
        suitableCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suitableComboItemStateChanged(evt);
            }
        });
        jPanel3.add(suitableCombo);
        suitableCombo.setBounds(300, 180, 220, 25);

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText(" Suitable For");
        jLabel9.setOpaque(true);
        jPanel3.add(jLabel9);
        jLabel9.setBounds(300, 160, 100, 15);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("I");
        jLabel3.setBorder(idText.getBorder());
        jPanel3.add(jLabel3);
        jLabel3.setBounds(300, 50, 10, 30);

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 540, 340));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(43, 87, 154), 1, true));
        jPanel1.setLayout(null);

        jLabel15.setBackground(new java.awt.Color(204, 204, 204));
        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("   Pricing");
        jLabel15.setOpaque(true);
        jPanel1.add(jLabel15);
        jLabel15.setBounds(1, 1, 548, 29);

        supplyPriceText.setEditable(false);
        supplyPriceText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        supplyPriceText.setForeground(new java.awt.Color(0, 102, 255));
        supplyPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                supplyPriceTextKeyTyped(evt);
            }
        });
        jPanel1.add(supplyPriceText);
        supplyPriceText.setBounds(10, 250, 160, 26);

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 102, 255));
        jLabel16.setText("  New Prices Different From These Values?");
        jLabel16.setOpaque(true);
        jPanel1.add(jLabel16);
        jLabel16.setBounds(270, 300, 240, 20);

        markupText.setEditable(false);
        markupText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        markupText.setForeground(new java.awt.Color(0, 102, 255));
        markupText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                markupTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                markupTextKeyTyped(evt);
            }
        });
        jPanel1.add(markupText);
        markupText.setBounds(200, 250, 160, 26);

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText(" + Markup");
        jLabel17.setOpaque(true);
        jPanel1.add(jLabel17);
        jLabel17.setBounds(210, 230, 100, 15);

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("  =Retail Price");
        jLabel18.setOpaque(true);
        jPanel1.add(jLabel18);
        jLabel18.setBounds(380, 230, 100, 15);

        retailPriceText.setEditable(false);
        retailPriceText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        retailPriceText.setForeground(new java.awt.Color(0, 102, 255));
        retailPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                retailPriceTextKeyTyped(evt);
            }
        });
        jPanel1.add(retailPriceText);
        retailPriceText.setBounds(380, 250, 160, 26);

        priceChangedCheck.setBackground(new java.awt.Color(255, 255, 255));
        priceChangedCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceChangedCheckActionPerformed(evt);
            }
        });
        jPanel1.add(priceChangedCheck);
        priceChangedCheck.setBounds(510, 300, 21, 20);

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(102, 102, 102));
        jLabel24.setText(" Current Inventory");
        jLabel24.setOpaque(true);
        jPanel1.add(jLabel24);
        jLabel24.setBounds(10, 140, 130, 15);

        qtyOnHandText.setEditable(false);
        qtyOnHandText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        qtyOnHandText.setForeground(new java.awt.Color(0, 102, 255));
        jPanel1.add(qtyOnHandText);
        qtyOnHandText.setBounds(10, 160, 160, 26);

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(102, 102, 102));
        jLabel25.setText(" Update Quantity");
        jLabel25.setOpaque(true);
        jPanel1.add(jLabel25);
        jLabel25.setBounds(200, 140, 130, 15);

        addingQtyText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addingQtyText.setForeground(new java.awt.Color(0, 102, 255));
        addingQtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addingQtyTextKeyTyped(evt);
            }
        });
        jPanel1.add(addingQtyText);
        addingQtyText.setBounds(200, 160, 160, 26);

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(102, 102, 102));
        jLabel26.setText(" Re - Order Point");
        jLabel26.setOpaque(true);
        jPanel1.add(jLabel26);
        jLabel26.setBounds(380, 140, 130, 15);

        minimumQtyText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        minimumQtyText.setForeground(new java.awt.Color(0, 102, 255));
        minimumQtyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimumQtyTextActionPerformed(evt);
            }
        });
        minimumQtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minimumQtyTextKeyTyped(evt);
            }
        });
        jPanel1.add(minimumQtyText);
        minimumQtyText.setBounds(380, 160, 160, 26);

        jLabel31.setBackground(new java.awt.Color(255, 255, 255));
        jLabel31.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(102, 102, 102));
        jLabel31.setText(" Supply Price");
        jLabel31.setOpaque(true);
        jPanel1.add(jLabel31);
        jLabel31.setBounds(10, 230, 100, 15);

        supplierCombo.setBackground(new java.awt.Color(65, 175, 75));
        supplierCombo.setEditable(true);
        supplierCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        supplierCombo.setForeground(new java.awt.Color(0, 102, 255));
        supplierCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                supplierComboItemStateChanged(evt);
            }
        });
        jPanel1.add(supplierCombo);
        supplierCombo.setBounds(10, 70, 223, 25);

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText(" Supplier");
        jLabel13.setOpaque(true);
        jPanel1.add(jLabel13);
        jLabel13.setBounds(10, 50, 78, 15);

        suppliereCodeText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        suppliereCodeText.setForeground(new java.awt.Color(0, 102, 255));
        suppliereCodeText.setMinimumSize(new java.awt.Dimension(14, 26));
        suppliereCodeText.setPreferredSize(new java.awt.Dimension(14, 26));
        jPanel1.add(suppliereCodeText);
        suppliereCodeText.setBounds(300, 70, 240, 26);

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText(" Supplier Code");
        jLabel14.setOpaque(true);
        jPanel1.add(jLabel14);
        jLabel14.setBounds(300, 50, 100, 15);

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 550, 340));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setText("Sizes of This Item has Effect to the Price?");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 490, 280, 40));

        varientToggleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ToggleColorLess.png"))); // NOI18N
        varientToggleLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                varientToggleLabelMouseClicked(evt);
            }
        });
        add(varientToggleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 470, 100, 80));

        sizePanel.setBackground(new java.awt.Color(255, 255, 255));
        sizePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 87, 154)));
        sizePanel.setLayout(null);

        jLabel30.setBackground(new java.awt.Color(204, 204, 204));
        jLabel30.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("   Size");
        jLabel30.setOpaque(true);
        sizePanel.add(jLabel30);
        jLabel30.setBounds(1, 1, 710, 29);

        sizeScroll.setBackground(new java.awt.Color(255, 255, 255));
        sizeScroll.setForeground(new java.awt.Color(255, 255, 255));

        sizeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Size", "Qty", "Price", "Re Order"
            }
        ));
        sizeScroll.setViewportView(sizeTable);

        sizePanel.add(sizeScroll);
        sizeScroll.setBounds(317, 40, 380, 140);

        priceText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        priceText.setForeground(new java.awt.Color(0, 102, 255));
        priceText.setMinimumSize(new java.awt.Dimension(14, 26));
        priceText.setPreferredSize(new java.awt.Dimension(14, 26));
        priceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceTextKeyTyped(evt);
            }
        });
        sizePanel.add(priceText);
        priceText.setBounds(10, 120, 130, 25);

        sizeCombo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sizeCombo.setForeground(new java.awt.Color(0, 102, 255));
        sizePanel.add(sizeCombo);
        sizeCombo.setBounds(10, 60, 130, 25);

        priceLabel.setBackground(new java.awt.Color(255, 255, 255));
        priceLabel.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(102, 102, 102));
        priceLabel.setText(" Price");
        priceLabel.setOpaque(true);
        sizePanel.add(priceLabel);
        priceLabel.setBounds(10, 100, 100, 15);

        jLabel23.setBackground(new java.awt.Color(255, 255, 255));
        jLabel23.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText(" Size");
        jLabel23.setOpaque(true);
        sizePanel.add(jLabel23);
        jLabel23.setBounds(10, 40, 78, 15);

        addSizeButton.setText("Add");
        addSizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSizeButtonActionPerformed(evt);
            }
        });
        sizePanel.add(addSizeButton);
        addSizeButton.setBounds(170, 160, 110, 23);

        qtyText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        qtyText.setForeground(new java.awt.Color(0, 102, 255));
        qtyText.setMinimumSize(new java.awt.Dimension(14, 26));
        qtyText.setPreferredSize(new java.awt.Dimension(14, 26));
        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyTextKeyTyped(evt);
            }
        });
        sizePanel.add(qtyText);
        qtyText.setBounds(160, 60, 130, 25);

        priceLabel1.setBackground(new java.awt.Color(255, 255, 255));
        priceLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        priceLabel1.setForeground(new java.awt.Color(102, 102, 102));
        priceLabel1.setText(" Qty");
        priceLabel1.setOpaque(true);
        sizePanel.add(priceLabel1);
        priceLabel1.setBounds(160, 40, 100, 15);

        reOrderText.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        reOrderText.setForeground(new java.awt.Color(0, 102, 255));
        reOrderText.setMinimumSize(new java.awt.Dimension(14, 26));
        reOrderText.setPreferredSize(new java.awt.Dimension(14, 26));
        reOrderText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                reOrderTextKeyTyped(evt);
            }
        });
        sizePanel.add(reOrderText);
        reOrderText.setBounds(160, 120, 130, 25);

        priceLabel2.setBackground(new java.awt.Color(255, 255, 255));
        priceLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        priceLabel2.setForeground(new java.awt.Color(102, 102, 102));
        priceLabel2.setText(" Re Order Point");
        priceLabel2.setOpaque(true);
        sizePanel.add(priceLabel2);
        priceLabel2.setBounds(160, 100, 120, 15);

        add(sizePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 710, 190));

        addItemLabel.setBackground(new java.awt.Color(65, 175, 75));
        addItemLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        addItemLabel.setForeground(new java.awt.Color(255, 255, 255));
        addItemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addItemLabel.setText("ADD");
        addItemLabel.setOpaque(true);
        addItemLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addItemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addItemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 570, 90, 40));

        jLabel4.setBackground(new java.awt.Color(68, 106, 129));
        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Cacel");
        jLabel4.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 570, 100, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void priceChangedCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceChangedCheckActionPerformed
        if(priceChangedCheck.isSelected()){
            AddAsNewItemForm newForm = new AddAsNewItemForm(this);
            newForm.setVisible(true);
        }
    }//GEN-LAST:event_priceChangedCheckActionPerformed

    private void varientToggleLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varientToggleLabelMouseClicked
        toggleSet();
    }//GEN-LAST:event_varientToggleLabelMouseClicked

    private void idTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idTextFocusGained
        TextFieldHandler.focusGained(idText);
    }//GEN-LAST:event_idTextFocusGained

    private void idTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_idTextKeyTyped

    private void idTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setValues();
        }
    }//GEN-LAST:event_idTextKeyPressed

    private void addNewItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewItemButtonMouseClicked
        
    }//GEN-LAST:event_addNewItemButtonMouseClicked

    private void supplierComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_supplierComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if(supplierCombo.getSelectedIndex() != 0){
                try {
                    supplierCombo.setEnabled(false);
                    
                    String selectedSupplierDetail = (String) supplierCombo.getSelectedItem();
                    String[] splittedValues = selectedSupplierDetail.split("-");
                    
                    selectedVendor = VendorController.searchVendor(splittedValues[1].trim());
                    
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }
    }//GEN-LAST:event_supplierComboItemStateChanged

    private void addItemLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemLabelMouseClicked
        try {
            if (!isAddingNewItem) {
                generateUpdateDataSet();
            }else{
                generateUpdateDataSet();
                generateAddItemDataSet();
            }
            
            
        } catch (NumberFormatException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addItemLabelMouseClicked

    private void addNewItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewItemButtonActionPerformed
        isAddingNewItem = true;
        idText.setText(null);
        idText.setEnabled(false);
        setItemTypeCombo();
        setItemCodeCombo();
        setTextFields();
    }//GEN-LAST:event_addNewItemButtonActionPerformed

    private void setTextFields() {
        qtyOnHandText.setText("0");
        supplyPriceText.setEditable(true);
        markupText.setEditable(true);
        retailPriceText.setEditable(true);
    }

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (typeCombo.getSelectedIndex() != 0) {
                try {
                    ItemType selectedItem = (ItemType) typeCombo.getSelectedItem();
                    String typeId = selectedItem.getTypeId();
                    ArrayList<ItemMajor> itemMajorList = ItemMajorController.getItemMajor(typeId);
                    setNameCombo(itemMajorList);
                    
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_typeComboItemStateChanged

    private void nameComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nameComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (nameCombo.getSelectedIndex() != 0) {
                ItemMajor selectedItemMajor = (ItemMajor) nameCombo.getSelectedItem();
                String description = selectedItemMajor.getDescription();
                descriptionText.setText(description);
                setSuitableCombo(selectedItemMajor);
                setBrandsCombo(selectedItemMajor);
                setSizeCombo(selectedItemMajor);
            }
        }
    }//GEN-LAST:event_nameComboItemStateChanged

    private void suitableComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_suitableComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_suitableComboItemStateChanged

    private void addSizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSizeButtonActionPerformed
        SizeOfItem size = (SizeOfItem) sizeCombo.getSelectedItem();
        String itemSize = size.getItemSize();
        int qty = 0;
        String price = null;
        int reOrderAmount = 0;
        if (TextFieldHandler.isAllTextFieldsFilled(priceText,qtyText,reOrderText)) {
            price = priceText.getText();
            qty = Integer.parseInt(qtyText.getText());
            reOrderAmount = Integer.parseInt(reOrderText.getText());
            DefaultTableModel sizeModel = (DefaultTableModel) sizeTable.getModel();
            Object[] rowData = {nextItemCode, itemSize, qty, price, reOrderAmount};
            sizeModel.addRow(rowData);
            nextItemCode = IDGenerator.getNextItemCode(nextItemCode);
            TextFieldHandler.clearTextFields(priceText,reOrderText,qtyText);
        }else{
            JOptionPane.showMessageDialog(NewItemForm.this, "Please Fill All", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addSizeButtonActionPerformed

    private void addingQtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addingQtyTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_addingQtyTextKeyTyped

    private void minimumQtyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimumQtyTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minimumQtyTextActionPerformed

    private void minimumQtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimumQtyTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_minimumQtyTextKeyTyped

    private void supplyPriceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supplyPriceTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_supplyPriceTextKeyTyped

    private void markupTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_markupTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_markupTextKeyTyped

    private void retailPriceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_retailPriceTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_retailPriceTextKeyTyped

    private void qtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_qtyTextKeyTyped

    private void priceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_priceTextKeyTyped

    private void reOrderTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reOrderTextKeyTyped
        Validation.validateOnlyForNumbers(evt);
    }//GEN-LAST:event_reOrderTextKeyTyped

    private void markupTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_markupTextKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            double supplyPrice = Double.parseDouble(supplyPriceText.getText());
            double markup = Double.parseDouble(markupText.getText());
            
            retailPriceText.setText(Double.toString(supplyPrice+markup));
        }
    }//GEN-LAST:event_markupTextKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addItemLabel;
    private javax.swing.JButton addNewItemButton;
    private javax.swing.JButton addSizeButton;
    private javax.swing.JTextField addingQtyText;
    private javax.swing.JComboBox<String> brandCombo;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JComboBox<String> idCombo;
    private javax.swing.JTextField idText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTextField markupText;
    private javax.swing.JTextField minimumQtyText;
    private javax.swing.JComboBox<String> nameCombo;
    private javax.swing.JCheckBox priceChangedCheck;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JLabel priceLabel2;
    private javax.swing.JTextField priceText;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JTextField reOrderText;
    private javax.swing.JTextField retailPriceText;
    private javax.swing.JCheckBox returnCheck;
    private javax.swing.JComboBox<String> sizeCombo;
    private javax.swing.JPanel sizePanel;
    private javax.swing.JScrollPane sizeScroll;
    private javax.swing.JTable sizeTable;
    private javax.swing.JComboBox<String> suitableCombo;
    private javax.swing.JComboBox<String> supplierCombo;
    private javax.swing.JTextField suppliereCodeText;
    private javax.swing.JTextField supplyPriceText;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JLabel varientToggleLabel;
    // End of variables declaration//GEN-END:variables

    
    
 

    private void toggleSet() {
        if(isVarientsHas){
            isVarientsHas = false;
            varientToggleLabel.setIcon(new ImageIcon(getClass().getResource("/images/ToggleColorLess.png")));
            varientToggleLabel.repaint(); 
            setOtherPanels();
           
        }else{
            isVarientsHas = true;
            varientToggleLabel.setIcon(new ImageIcon(getClass().getResource("/images/ToggleButtonGreen.png")));
            varientToggleLabel.repaint(); 
            setOtherPanels();
           
        }
    }
    
    private void setSizeTable() {
        sizeScroll.getViewport().setBackground(new Color(255, 255, 255));
    }

    private void setOtherPanels() {
        if (isVarientsHas) {
            sizePanel.setVisible(true);
            priceText.setText(retailPriceText.getText());
        }else{
            sizePanel.setVisible(false);
        }

    }

    private void setVendorCombo() {
        try {
            supplierCombo.addItem("-Add New Supplier");
            ArrayList<String> idNames = VendorController.getAllVendorIdName();
            for (String idName : idNames) {
                supplierCombo.addItem(idName);
            }
            new ComboSearch().setSearchableCombo(supplierCombo, true, "No Such Venodr");
            supplierCombo.setSelectedIndex(-1);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    
    

    private ItemDetail getItemDetails() throws NumberFormatException, SQLException, ClassNotFoundException {
       
        //Details for Item Detail Object
        String invoiceNumber = null;
        double supplyPrice = 0;
        String selectedItemCode = null;
        int addingQty = 0;
        String suplierCode = null;
        if (TextFieldHandler.isAllTextFieldsFilled(addingQtyText,supplyPriceText)) {
            
            addingQty = Integer.parseInt(addingQtyText.getText());
            selectedItemCode = (String) idCombo.getSelectedItem();
            supplyPrice = Double.parseDouble(supplyPriceText.getText());
            if (!suppliereCodeText.getText().isEmpty()) {
                suplierCode = suppliereCodeText.getText();
            }
            nextDetailId = getNextDetailId();
            invoiceNumber = PurchaseInvoiceController.getNextInvoiceNumber();
            ItemDetail itemDetail = new ItemDetail();
            itemDetail.setDetailCode(nextDetailId);
            itemDetail.setInvoiceNumber(invoiceNumber);
            itemDetail.setBuyingPrice(supplyPrice);
            itemDetail.setItemCode(selectedItemCode);
            itemDetail.setQtyOfEachItem(addingQty);
            itemDetail.setSupplierCode(suplierCode);

            return itemDetail;
        }else{
            JOptionPane.showMessageDialog(NewItemForm.this, "Fill All Necessary Fields", "Fill All", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private void setValues() {
        try {
            InventoryItem item = InventoryItemController.searchItem("I"+idText.getText());
            if (item != null) {
                selectedMajorItemForUpdate = ItemMajorController.searchItemMajor(item.getProductCode());
                ItemType itemType = ItemTypeController.searchItemType(selectedMajorItemForUpdate.getTypeId());
                
                idCombo.removeAllItems();
                idCombo.addItem(item.getItemCode());
                
                nameCombo.removeAllItems();
                nameCombo.addItem(selectedMajorItemForUpdate.getProductName());
                descriptionText.setText(selectedMajorItemForUpdate.getDescription());
                
                typeCombo.removeAllItems();;
                typeCombo.addItem(itemType.getTypeName());
                
                brandCombo.removeAllItems();
                brandCombo.addItem(item.getBrandName());
                
                suitableCombo.removeAllItems();
                suitableCombo.addItem(item.getGender());
                
                returnCheck.setSelected(item.isReturnStatus());
                qtyOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                supplyPriceText.setText(Double.toString(item.getSupplyPrice()));
                markupText.setText(Double.toString(item.getMarkup()));
                retailPriceText.setText(Double.toString(item.getMarkup()*item.getSupplyPrice()/100+item.getSupplyPrice()));
                minimumQtyText.setText(Integer.toString(item.getMinimumQty()));
            }else{
                NewItemPromptForm form = new NewItemPromptForm(this);
                form.setVisible(true);
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getNextDetailId() {
        String nextId = null;
        if(nextDetailId == null){
            try {
                nextId = ItemDetailController.getNextItemDetailId();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            nextId = IDGenerator.getNextDetailId(nextDetailId);
        }
        return nextId;
    }

    private ItemTableModel createTableModel(ItemDetail detail) {
        ItemTableModel tableModel = new ItemTableModel();
        
        tableModel.setBrand(brandCombo.getSelectedItem().toString());
        tableModel.setDetailCode(nextDetailId);
        tableModel.setItemCode(detail.getItemCode());
        tableModel.setDescription(descriptionText.getText());
        tableModel.setSupplyPrice(detail.getBuyingPrice());
        tableModel.setUpdateQty(detail.getQtyOfEachItem());
        tableModel.setAmount(detail.getBuyingPrice()*detail.getQtyOfEachItem());
        tableModel.setSellerCode(suppliereCodeText.getText());
        return tableModel;
    }
    
    public void generateInvoice(){
        PurchaseInvoiceForm addedItemsForm = new PurchaseInvoiceForm();
        addedItemsForm.valuesOfItems(ItemTableModelList,updateList,itemDetailsList,newlyAddingItemsList,selectedVendor);
        
        JPanel formsPanel = HomeForm.getFormsPanelInstance();
        formsPanel.removeAll();
        formsPanel.add(addedItemsForm);
        formsPanel.revalidate();
        
    }

    private void generateUpdateDataSet() throws SQLException, NumberFormatException, ClassNotFoundException {
        if (!isVarientsHas) {
            //Get data from Form to create ItemDetail object Using this method
            ItemDetail itemDetails = getItemDetails();
            if(itemDetails != null){
                itemDetailsList.add(itemDetails);
            }
            //Add hashmap to selected items
            

            //This method gets data from Form and create ItemTableModel helper model object
            ItemTableModel itemModel = createTableModel(itemDetails);
            //Add above details to ItemTableModelList array list
            ItemTableModelList.add(itemModel);
            //Generate tempory view form of AddedItemTemporyListForm and pass data to it
            
            listForm.setItemValues(ItemTableModelList);
            listForm.setVisible(true);
            
            
            String itemCode = itemDetails.getItemCode();
            int qtyOfEachItem = itemDetails.getQtyOfEachItem();
            
            UpdateInventoryItem update = new UpdateInventoryItem(itemCode, qtyOfEachItem);
            updateList.add(update);
            
            
        }else{
            
            for (int i = 0; i < sizeTable.getRowCount(); i++) {
                ItemDetail itemDetails = getItemDetails();
                itemDetails.setItemCode((String) sizeTable.getValueAt(i, 0));
                itemDetails.setBuyingPrice(Double.parseDouble((String)sizeTable.getValueAt(i, 3)));
                itemDetails.setQtyOfEachItem((int)sizeTable.getValueAt(i, 2));
                itemDetails.setTotalBuyingPrice(itemDetails.getBuyingPrice()*itemDetails.getQtyOfEachItem());
                itemDetailsList.add(itemDetails);
                ItemTableModel itemModel = createTableModel(itemDetails);
                ItemTableModelList.add(itemModel);
            }
            
            listForm.setItemValues(ItemTableModelList);
            listForm.setVisible(true);
            
        }
    }
    
    private void generateAddItemDataSet() {
        if (!isVarientsHas) {
            InventoryItem inventoryItem = getInventoryItemDetails();
            newlyAddingItemsList.add(inventoryItem);
        }else{
            ArrayList<InventoryItem> itemList = getInventoryItemDetailsWithSize();
            for (InventoryItem inventoryItem : itemList) {
                newlyAddingItemsList.add(inventoryItem);
            }
        }
        
        
    }


    private void setItemTypeCombo() {
        nameComboModel = (DefaultComboBoxModel) typeCombo.getModel();
        ItemListener[] itemListeners = typeCombo.getItemListeners();
        typeCombo.removeItemListener(itemListeners[0]);
        typeCombo.addItem("-New Type");
        try {
            ArrayList<ItemType> itemTypeList = ItemTypeController.viewAllItemTypeDetails();
            for (ItemType itemType : itemTypeList) {
                nameComboModel.addElement(itemType);
            }
            typeCombo.setSelectedIndex(-1);
            typeCombo.addItemListener(itemListeners[0]);
            typeCombo.setEnabled(true);
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void setNameCombo(ArrayList<ItemMajor> itemMajorList) {
        nameCombo.removeAllItems();
        nameComboModel = (DefaultComboBoxModel) nameCombo.getModel();
        ItemListener[] itemListeners = nameCombo.getItemListeners();
        nameCombo.removeItemListener(itemListeners[0]);
        nameCombo.addItem("-New Name");
        
        for (ItemMajor itemType : itemMajorList) {
            nameComboModel.addElement(itemType);
        }
        nameCombo.setSelectedIndex(-1);
        nameCombo.addItemListener(itemListeners[0]);
        nameCombo.setEnabled(true);


    }

    private void setItemCodeCombo() {
        try {
            if(nextItemCode == null){
                nextItemCode = InventoryItemController.getNextItemCode();
            }else{
                nextItemCode = IDGenerator.getNextItemCode(nextItemCode);
            }
            
            idCombo.addItem(nextItemCode);
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setSuitableCombo(ItemMajor selectedItemMajor) {
        suitableCombo.removeAllItems();
        try {
            ArrayList<ItemSubType> itemSubTypes = ItemSubTypeDetailController.getItemSubTypes(selectedItemMajor.getProductCode());
            suitableComboModel = (DefaultComboBoxModel) suitableCombo.getModel();
            ItemListener[] itemListeners = suitableCombo.getItemListeners();
            suitableCombo.removeItemListener(itemListeners[0]);
            suitableCombo.addItem("-New Type");
            for (ItemSubType itemSubType : itemSubTypes) {
                suitableComboModel.addElement(itemSubType);
            }
            suitableCombo.setSelectedIndex(-1);
            suitableCombo.addItemListener(itemListeners[0]);
            suitableCombo.setEnabled(true);
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setBrandsCombo(ItemMajor selectedMajor) {
        brandCombo.removeAllItems();
        try {
            ArrayList<Brand> allBrands = BrandDetailController.getSelectedBrands(selectedMajor.getProductCode());
            brandComboModel = (DefaultComboBoxModel) brandCombo.getModel();
            ItemListener[] itemListeners = brandCombo.getItemListeners();
            brandCombo.removeItemListener(itemListeners[0]);
            brandCombo.addItem("-New Brand");
            
            for (Brand brand : allBrands) {
                brandComboModel.addElement(brand);
            }
            brandCombo.setSelectedIndex(-1);
            brandCombo.addItemListener(itemListeners[0]);
            brandCombo.setEnabled(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setSizeCombo(ItemMajor selectedItemMajor) {
        sizeCombo.removeAllItems();
        try {
            ArrayList<SizeOfItem> selectedSizes = ItemSizeDetailController.getSelectedSizes(selectedItemMajor.getProductCode());
            sizeComboModel = (DefaultComboBoxModel) sizeCombo.getModel();
            ItemListener[] itemListeners = sizeCombo.getItemListeners();
            sizeCombo.removeItemListener(itemListeners[0]);
            sizeCombo.addItem("-New Size");
            
            for (SizeOfItem size : selectedSizes) {
                sizeComboModel.addElement(size);
            }
            sizeCombo.setSelectedIndex(-1);
            sizeCombo.addItemListener(itemListeners[0]);
            sizeCombo.setEnabled(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private InventoryItem getInventoryItemDetails() {
        Object gender = suitableCombo.getSelectedItem();
        ItemMajor selectedItem = (ItemMajor) nameCombo.getSelectedItem();
        
        String productCode = selectedItem.getProductCode();
        Object brand = brandCombo.getSelectedItem();
        boolean returnStatus = returnCheck.isSelected();
        int qtyOnHand = Integer.parseInt(addingQtyText.getText());
        int minimumQty = Integer.parseInt(minimumQtyText.getText());
        double supplyPrice = Double.parseDouble(supplyPriceText.getText());
        double markup = Double.parseDouble(markupText.getText());
        double retailPrice = Double.parseDouble(retailPriceText.getText());
        String date = getDate();
        
        InventoryItem inventoryItem = new InventoryItem();
        
        inventoryItem.setBrandName(brand.toString());
        inventoryItem.setItemCode(nextItemCode);
        inventoryItem.setReturnStatus(returnStatus);
        inventoryItem.setQtyOnHand(qtyOnHand);
        inventoryItem.setMinimumQty(minimumQty);
        inventoryItem.setSupplyPrice(supplyPrice);
        inventoryItem.setMarkup(markup);
        inventoryItem.setRetailPrice(retailPrice);
        inventoryItem.setAddedDate(date);
        inventoryItem.setProductCode(productCode);
        inventoryItem.setGender(suitableCombo.getSelectedItem().toString());
        
        return inventoryItem;
    }

    private String getDate() {
        Date date = new Date();
        SimpleDateFormat instance = new SimpleDateFormat("yyyy-MM-dd");
        return instance.format(date);
    }

    private ArrayList<InventoryItem> getInventoryItemDetailsWithSize() {
        ArrayList<InventoryItem> itemList = new ArrayList<>();
        for (int i = 0; i < sizeTable.getRowCount(); i++) {
            InventoryItem item = getInventoryItemDetails();
            item.setItemCode((String) sizeTable.getValueAt(i, 0));
            item.setItemSize((String) sizeTable.getValueAt(i, 1));
            item.setSupplyPrice((int) sizeTable.getValueAt(i, 2));
            itemList.add(item);
        }
        return itemList;
    }

    public void resetFields() {
        isAddingNewItem = false;
        ComboBoxHandler.clearComboBoxes(idCombo,typeCombo,nameCombo,suitableCombo,brandCombo);
        idText.setEnabled(true);
        idText.setEditable(true);
        isVarientsHas = false;
        setOtherPanels();
        TextFieldHandler.clearTextFields(descriptionText,suppliereCodeText,qtyOnHandText,addingQtyText,minimumQtyText,supplyPriceText,markupText,retailPriceText);
        returnCheck.setSelected(false);
        priceChangedCheck.setSelected(false);
        
    }

    public void addNewItem() {
        addNewItemButton.doClick();
    }

    

    
    
}
